// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThiTriTueNhanTao.Server.Data;

#nullable disable

namespace ThiTriTueNhanTao.Server.Migrations
{
    [DbContext(typeof(EmployeeDbContext))]
    [Migration("20250718154254_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.ChamCong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ThoiGian")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChamCong");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.ChiNhanh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Huyen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("NgayTaoChiNhanh")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SoNha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenChiNhanh")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tinh")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Xa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChiNhanh");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.ChucVu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MoTa")
                        .HasColumnType("text");

                    b.Property<string>("TenChucVu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ChucVu");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.ChucVuNguoiDung", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChiNhanhId")
                        .HasColumnType("integer");

                    b.Property<int?>("ChucVuId")
                        .HasColumnType("integer");

                    b.Property<int>("LuongCoBan")
                        .HasColumnType("integer");

                    b.Property<int?>("MaChiNhanh")
                        .HasColumnType("integer");

                    b.Property<int>("MaChucVu")
                        .HasColumnType("integer");

                    b.Property<int?>("MaNhom")
                        .HasColumnType("integer");

                    b.Property<int?>("MaPhongBan")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NgayBatDau")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("NhomMaNhom")
                        .HasColumnType("integer");

                    b.Property<int?>("PhongBanId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChiNhanhId");

                    b.HasIndex("ChucVuId");

                    b.HasIndex("NhomMaNhom");

                    b.HasIndex("PhongBanId");

                    b.HasIndex("UserId");

                    b.ToTable("ChucVuNguoiDung");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.HinhAnhNhanVien", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HinhAnhNhanVien");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.Nhom", b =>
                {
                    b.Property<int>("MaNhom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaNhom"));

                    b.Property<int>("MaPhongBan")
                        .HasColumnType("integer");

                    b.Property<string>("MoTaNhiemVu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PhongBanId")
                        .HasColumnType("integer");

                    b.Property<string>("TenNhom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("MaNhom");

                    b.HasIndex("PhongBanId");

                    b.ToTable("Nhom");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.PhongBan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChiNhanhId")
                        .HasColumnType("integer");

                    b.Property<int>("MaChiNhanh")
                        .HasColumnType("integer");

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TenPhongBan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChiNhanhId");

                    b.ToTable("PhongBan");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("GioiTinh")
                        .HasColumnType("boolean");

                    b.Property<float>("HeSoLuong")
                        .HasColumnType("real");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Huyen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("NgayBatDauLam")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("NgayCap")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NoiCap")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("SoNha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Tinh")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrinhDo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Xa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ThiTriTueNhanTao.Server.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ThiTriTueNhanTao.Server.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThiTriTueNhanTao.Server.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ThiTriTueNhanTao.Server.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.ChamCong", b =>
                {
                    b.HasOne("ThiTriTueNhanTao.Server.Data.User", "User")
                        .WithMany("ChamCongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.ChucVuNguoiDung", b =>
                {
                    b.HasOne("ThiTriTueNhanTao.Server.Data.ChiNhanh", "ChiNhanh")
                        .WithMany("ChucVuNguoiDungs")
                        .HasForeignKey("ChiNhanhId");

                    b.HasOne("ThiTriTueNhanTao.Server.Data.ChucVu", "ChucVu")
                        .WithMany("ChucVuNguoiDungs")
                        .HasForeignKey("ChucVuId");

                    b.HasOne("ThiTriTueNhanTao.Server.Data.Nhom", "Nhom")
                        .WithMany("ChucVuNguoiDungs")
                        .HasForeignKey("NhomMaNhom");

                    b.HasOne("ThiTriTueNhanTao.Server.Data.PhongBan", "PhongBan")
                        .WithMany("ChucVuNguoiDungs")
                        .HasForeignKey("PhongBanId");

                    b.HasOne("ThiTriTueNhanTao.Server.Data.User", "User")
                        .WithMany("ChucVuNguoiDungs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChiNhanh");

                    b.Navigation("ChucVu");

                    b.Navigation("Nhom");

                    b.Navigation("PhongBan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.HinhAnhNhanVien", b =>
                {
                    b.HasOne("ThiTriTueNhanTao.Server.Data.User", "User")
                        .WithMany("HinhAnhNhanViens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.Nhom", b =>
                {
                    b.HasOne("ThiTriTueNhanTao.Server.Data.PhongBan", "PhongBan")
                        .WithMany("Nhoms")
                        .HasForeignKey("PhongBanId");

                    b.Navigation("PhongBan");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.PhongBan", b =>
                {
                    b.HasOne("ThiTriTueNhanTao.Server.Data.ChiNhanh", "ChiNhanh")
                        .WithMany("PhongBans")
                        .HasForeignKey("ChiNhanhId");

                    b.Navigation("ChiNhanh");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.ChiNhanh", b =>
                {
                    b.Navigation("ChucVuNguoiDungs");

                    b.Navigation("PhongBans");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.ChucVu", b =>
                {
                    b.Navigation("ChucVuNguoiDungs");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.Nhom", b =>
                {
                    b.Navigation("ChucVuNguoiDungs");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.PhongBan", b =>
                {
                    b.Navigation("ChucVuNguoiDungs");

                    b.Navigation("Nhoms");
                });

            modelBuilder.Entity("ThiTriTueNhanTao.Server.Data.User", b =>
                {
                    b.Navigation("ChamCongs");

                    b.Navigation("ChucVuNguoiDungs");

                    b.Navigation("HinhAnhNhanViens");
                });
#pragma warning restore 612, 618
        }
    }
}
